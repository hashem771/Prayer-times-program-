let localDB = null;
let isManualMode = false;
let alarmTimer = null;
let nextPrayerTimer = null;
let isArabic = true;
let prayerDetails = {
  Fajr: "ุตูุงุฉ ุงููุฌุฑ ูู ุฃูู ุงูุตููุงุช ุงูุฎูุณ ุงูููุฑูุถุฉุ ูููุชูุง ูู ุทููุน ุงููุฌุฑ ุงูุตุงุฏู ุฅูู ุดุฑูู ุงูุดูุณ. ุนุฏุฏ ุฑูุนุงุชูุง ุฑูุนุชุงู.",
  Sunrise: "ููุช ุงูุดุฑูู ูู ุจุฏุงูุฉ ุทููุน ุงูุดูุณุ ูููู ููุชูู ููุช ุตูุงุฉ ุงููุฌุฑ ููุจุฏุฃ ููุช ุงูููู ุนู ุงูุตูุงุฉ ุญุชู ุชุฑุชูุน ุงูุดูุณ.",
  Dhuhr: "ุตูุงุฉ ุงูุธูุฑ ูู ุงูุตูุงุฉ ุงูุซุงููุฉุ ูููุชูุง ูุจุฏุฃ ุนูุฏูุง ุชุฒูู ุงูุดูุณ ุนู ูุจุฏ ุงูุณูุงุก (ููุชุตู ุงูููุงุฑ) ูููุชูู ุนูุฏูุง ูุตูุฑ ุธู ูู ุดูุก ูุซูู. ุนุฏุฏ ุฑูุนุงุชูุง ุฃุฑุจุน ุฑูุนุงุช.",
  Asr: "ุตูุงุฉ ุงูุนุตุฑ ูู ุงูุตูุงุฉ ุงูุซุงูุซุฉุ ูููุชูุง ูุจุฏุฃ ุนูุฏูุง ูุตูุฑ ุธู ุงูุดูุก ูุซูู ูููุชูู ุจุบุฑูุจ ุงูุดูุณ. ุนุฏุฏ ุฑูุนุงุชูุง ุฃุฑุจุน ุฑูุนุงุช.",
  Maghrib: "ุตูุงุฉ ุงููุบุฑุจ ูู ุงูุตูุงุฉ ุงูุฑุงุจุนุฉุ ูููุชูุง ูุจุฏุฃ ุจุนุฏ ุบุฑูุจ ุงูุดูุณ ูุจุงุดุฑุฉ ูููุชูู ุจุงุฎุชูุงุก ุงูุดูู ุงูุฃุญูุฑ. ุนุฏุฏ ุฑูุนุงุชูุง ุซูุงุซ ุฑูุนุงุช.",
  Isha: "ุตูุงุฉ ุงูุนุดุงุก ูู ุงูุตูุงุฉ ุงูุฎุงูุณุฉุ ูููุชูุง ูุจุฏุฃ ุจุนุฏ ูุบูุจ ุงูุดูู ุงูุฃุญูุฑ ูููุชูู ุจููุชุตู ุงูููู. ุนุฏุฏ ุฑูุนุงุชูุง ุฃุฑุจุน ุฑูุนุงุช."
};

// ุฏุงูุฉ ูุชุญููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ
async function loadLocalDB() {
  if (localDB) return;
  
  try {
    const response = await fetch('l0.json');
    if (!response.ok) throw new Error(`ูุดู ุชุญููู ุงูููู: ${response.status}`);
    
    localDB = await response.json();
    populateCountries();
    if (isManualMode) updateCityDropdown();
  } catch (error) {
    console.error('ูุดู ุชุญููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ:', error);
    handleError('ูุดู ุชุญููู ุงูุจูุงูุงุช ุงููุญููุฉ. ุงูุฑุฌุงุก ุงูุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช ุซู ุฅุนุงุฏุฉ ุงูุชุญููู.');
    localDB = { locations: [], countries: [] };
  }
}

// ุฏุงูุฉ ูุชุนุจุฆุฉ ูุงุฆูุฉ ุงูุฏูู
function populateCountries() {
  if (!localDB?.countries) return;
  
  const countrySelector = document.getElementById('countrySelect');
  countrySelector.innerHTML = '<option value="">-- ุงุฎุชุฑ ุงูุฏููุฉ --</option>';
  
  try {
    const uniqueCountries = {};
    localDB.locations.forEach(location => {
      if (!uniqueCountries[location.country_code]) {
        const country = localDB.countries.find(c => c.code1 === location.country_code);
        if (country) uniqueCountries[location.country_code] = isArabic ? country.ar_country : country.en_country;
      }
    });
    
    Object.keys(uniqueCountries).forEach(code => {
      const option = document.createElement('option');
      option.value = code;
      option.textContent = uniqueCountries[code];
      countrySelector.appendChild(option);
    });
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุชุนุจุฆุฉ ุงูุฏูู:', error);
    handleError('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ูุงุฆูุฉ ุงูุฏูู');
  }
}

// ุฏุงูุฉ ูุชุญุฏูุซ ูุงุฆูุฉ ุงููุฏู ุจูุงุกู ุนูู ุงูุฏููุฉ
function updateCityDropdown() {
  const countryCode = document.getElementById('countrySelect').value;
  const citySelector = document.getElementById('citySelect');
  citySelector.innerHTML = '<option value="">-- ุงุฎุชุฑ ุงููุฏููุฉ --</option>';

  if (!localDB?.locations) return;

  try {
    if (countryCode) {
      const cities = localDB.locations.filter(loc => loc.country_code === countryCode);
      cities.forEach(city => {
        const option = document.createElement('option');
        option.value = city.id;
        option.textContent = isArabic ? city.ar_city : city.en_city;
        citySelector.appendChild(option);
      });
    }
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุชุนุจุฆุฉ ุงููุฏู:', error);
    handleError('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ูุงุฆูุฉ ุงููุฏู');
  }
}

// ุฏุงูุฉ ูุชุญููู ุงูููุช ูู 24 ุฅูู 12 ุณุงุนุฉ
function formatTime24To12(time24) {
  if (!time24 || typeof time24 !== 'string') return "--:--";
  const parts = time24.split(':');
  if (parts.length < 2) return "--:--";
  
  let hours = parseInt(parts[0], 10);
  const minutes = parts[1];
  if (isNaN(hours)) return "--:--";
  
  const period = hours >= 12 ? (isArabic ? 'ู' : 'PM') : (isArabic ? 'ุต' : 'AM');
  hours = hours % 12 || 12;
  return `${hours}:${minutes} ${period}`;
}

// ุฏุงูุฉ ูุญูุธ ูุงุณุชุฑุฌุงุน ุทุฑููุฉ ุงูุญุณุงุจ
function saveMethodToLocalStorage(method) {
  localStorage.setItem('selectedMethod', method);
}
function getSavedMethod() {
  return localStorage.getItem('selectedMethod') || '0';
}

// ุฏุงูุฉ ููุญุตูู ุนูู ุฃููุงุช ุงูุตูุงุฉ ุงูุงูุชุฑุงุถูุฉ
function getFallbackTimes() {
  return {
    Fajr: "05:00",
    Sunrise: "06:00",
    Dhuhr: "12:00",
    Asr: "15:00",
    Maghrib: "18:00",
    Isha: "19:30"
  };
}

// ุฏุงูุฉ ููุญุตูู ุนูู ุงููููุน ุงูุฌุบุฑุงูู
function getLocation() {
  if (!navigator.geolocation) {
    handleError(isArabic ? '๐ซ ุงููุชุตูุญ ูุง ูุฏุนู ุฎุฏูุฉ ุงููููุน' : '๐ซ Browser does not support geolocation');
    fetchPrayerTimes({ latitude: 24.7136, longitude: 46.6753 });
    return;
  }

  document.getElementById('error').innerHTML = '';

  if (isManualMode) {
    const selectedId = document.getElementById('citySelect').value;
    if (selectedId) {
      const city = localDB.locations.find(loc => loc.id == selectedId);
      if (city) {
        updateUI(city.prayerTimes || getFallbackTimes(), isArabic ? city.ar_city : city.en_city);
        return;
      }
    }
  }

  document.getElementById('loading').style.display = 'flex';
  navigator.geolocation.getCurrentPosition(
    position => fetchPrayerTimes(position.coords),
    error => {
      handleError(isArabic ? 'โ ุงูุฑุฌุงุก ุชูุนูู ุฎุฏูุฉ ุงููููุน' : 'โ Please enable location services');
      fetchPrayerTimes({ latitude: 24.7136, longitude: 46.6753 });
    }
  );
}

// ุฏุงูุฉ ูุฌูุจ ุฃููุงุช ุงูุตูุงุฉ
async function fetchPrayerTimes(coords) {
  const method = document.getElementById('calculationMethod').value;
  saveMethodToLocalStorage(method);

  try {
    if (!navigator.onLine) {
      document.getElementById('offlineNotice').style.display = 'flex';
      if (!localDB) throw new Error(isArabic ? 'ูุง ุชูุฌุฏ ุจูุงูุงุช ูุญููุฉ ูุชุงุญุฉ' : 'No local data available');

      if (isManualMode && document.getElementById('citySelect').value) {
        const selectedId = document.getElementById('citySelect').value;
        const city = localDB.locations.find(loc => loc.id == selectedId);
        if (city) {
          updateUI(city.prayerTimes || getFallbackTimes(), isArabic ? city.ar_city : city.en_city);
          return;
        }
      }

      let nearestCity = null;
      if (localDB.locations) {
        let minDistance = Infinity;
        localDB.locations.forEach(location => {
          const distance = Math.sqrt(
            Math.pow(location.lat - coords.latitude, 2) +
            Math.pow(location.loong - coords.longitude, 2)
          );
          if (distance < minDistance) {
            minDistance = distance;
            nearestCity = location;
          }
        });
      }

      if (nearestCity) {
        updateUI(nearestCity.prayerTimes || getFallbackTimes(), isArabic ? nearestCity.ar_city : nearestCity.en_city);
      } else {
        throw new Error(isArabic ? 'ูุง ุชูุฌุฏ ุจูุงูุงุช ูููุฏููุฉ ุงูุญุงููุฉ' : 'No data for current location');
      }
      return;
    }

    document.getElementById('offlineNotice').style.display = 'none';
    const locationRes = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${coords.latitude}&lon=${coords.longitude}&format=json`);
    if (!locationRes.ok) throw new Error(isArabic ? 'ูุดู ูู ุงูุญุตูู ุนูู ุงุณู ุงููููุน' : 'Failed to get location name');
    
    const locationData = await locationRes.json();
    const city = encodeURIComponent(locationData.address.city || locationData.address.town || 'Sanaa');
    const country = encodeURIComponent(locationData.address.country || 'Yemen');
    const cacheKey = `${city}-${country}-method${method}`;

    const stored = JSON.parse(localStorage.getItem(cacheKey));
    if (stored) {
      updateUI(stored.data, city);
      return;
    }

    const response = await fetch(`https://api.aladhan.com/v1/timingsByCity?city=${city}&country=${country}&method=${method}`);
    if (!response.ok) throw new Error(isArabic ? 'ูุดู ูู ุฌูุจ ุฃููุงุช ุงูุตูุงุฉ' : 'Failed to fetch prayer times');
    
    const data = await response.json();
    if (data.code === 200) {
      const prayerData = data.data.timings;
      localStorage.setItem(cacheKey, JSON.stringify({ data: prayerData, timestamp: Date.now() }));
      
      // ุฅุถุงูุฉ ููุช ุงูุดุฑูู ุฅุฐุง ูู ููู ููุฌูุฏุงู
      if (!prayerData.Sunrise) {
        prayerData.Sunrise = data.data.meta.sunrise || "06:00";
      }
      
      updateUI(prayerData, city);
    } else {
      throw new Error(isArabic ? 'ุญุฏุซ ุฎุทุฃ ูู ุฌูุจ ุงูุจูุงูุงุช ูู ุงูุฎุงุฏู' : 'Server error while fetching data');
    }
  } catch (error) {
    console.error('Error:', error);
    if (error.message.includes('Could not establish connection')) return;
    
    if (navigator.onLine) {
      handleError((isArabic ? 'โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู: ' : 'โ Server connection error: ') + error.message);
    } else {
      handleError(isArabic ? '๐ก ุชู ุงูุชุจุฏูู ูููุถุน ุฏูู ุงุชุตุงู' : '๐ก Switched to offline mode');
      updateUI(getFallbackTimes(), isArabic ? 'ุงููููุน ุงูุญุงูู' : 'Current Location');
    }
  }
}

// ุฏุงูุฉ ูุชุญุฏูุซ ูุงุฌูุฉ ุงููุณุชุฎุฏู ุจุฃููุงุช ุงูุตูุงุฉ
function updateUI(timings, locationName = '') {
  try {
    const prayerTimesDiv = document.getElementById('prayerTimes');
    prayerTimesDiv.innerHTML = '';

    // ุฅุฒุงูุฉ ุฃู ุนูุตุฑ ูููุน ุณุงุจู
    const container = document.querySelector('.container');
    const oldLocationDisplay = container.querySelector('.location-display');
    if (oldLocationDisplay) oldLocationDisplay.remove();

    const prayerOrder = [
      { key: 'Fajr', name: isArabic ? 'ุงููุฌุฑ ๐' : 'Fajr ๐' },
      { key: 'Sunrise', name: isArabic ? 'ุงูุดุฑูู โ๏ธ' : 'Sunrise โ๏ธ' },
      { key: 'Dhuhr', name: isArabic ? 'ุงูุธูุฑ โ๏ธ' : 'Dhuhr โ๏ธ' },
      { key: 'Asr', name: isArabic ? 'ุงูุนุตุฑ โ' : 'Asr โ' },
      { key: 'Maghrib', name: isArabic ? 'ุงููุบุฑุจ ๐' : 'Maghrib ๐' },
      { key: 'Isha', name: isArabic ? 'ุงูุนุดุงุก ๐' : 'Isha ๐' }
    ];

    // ุงูุจุญุซ ุนู ุงูุตูุงุฉ ุงูุชุงููุฉ
    const now = new Date();
    let nextPrayer = null;
    let minDiff = Infinity;

    prayerOrder.forEach(prayer => {
      const timeStr = timings[prayer.key];
      const [hours, minutes] = timeStr.split(':').map(Number);
      const prayerTime = new Date();
      prayerTime.setHours(hours, minutes, 0, 0);
      
      // ุฅุฐุง ูุงูุช ุงูุตูุงุฉ ุจุนุฏ ุงูููุช ุงูุญุงูู
      if (prayerTime > now) {
        const diff = prayerTime - now;
        if (diff < minDiff) {
          minDiff = diff;
          nextPrayer = prayer;
        }
      }
    });

    // ุชุญุฏูุซ ุนููุงู ุงูุตูุงุฉ ุงูุชุงููุฉ
    if (nextPrayer) {
      document.getElementById('nextPrayerName').textContent = nextPrayer.name;
    } else {
      // ุฅุฐุง ูู ุชูุฌุฏ ุตูุงุฉ ูุงุฏูุฉุ ูุนุชุจุฑ ุงููุฌุฑ ูู ุงูุชุงูู
      document.getElementById('nextPrayerName').textContent = prayerOrder[0].name;
      nextPrayer = prayerOrder[0];
    }

    // ุชุญุฏูุซ ุงูููุช ุงููุชุจูู ููุตูุงุฉ ุงูุชุงููุฉ
    updateNextPrayerCountdown(timings[nextPrayer.key]);

    prayerOrder.forEach(prayer => {
      const timeValue = timings[prayer.key] ? formatTime24To12(timings[prayer.key]) : '--:--';
      
      const card = document.createElement('div');
      card.className = 'prayer-card';
      if (prayer.key === nextPrayer.key) {
        card.classList.add('next');
      }
      
      card.innerHTML = `
        <h3>${prayer.name}</h3>
        <div class="prayer-time">${timeValue}</div>
      `;
      
      // ุฅุถุงูุฉ ุญุฏุซ ุงูููุฑ ูุนุฑุถ ูุนูููุงุช ุงูุตูุงุฉ
      card.addEventListener('click', () => {
        // ุฅุฒุงูุฉ ุงููุนุงููุฉ ูู ุฌููุน ุงูุจุทุงูุงุช
        document.querySelectorAll('.prayer-card').forEach(c => c.classList.remove('active'));
        // ุฅุถุงูุฉ ุงููุนุงููุฉ ููุจุทุงูุฉ ุงููุฎุชุงุฑุฉ
        card.classList.add('active');
        // ุนุฑุถ ูุนูููุงุช ุงูุตูุงุฉ
        document.getElementById('prayerDetails').innerHTML = `
          <h4>${prayer.name}</h4>
          <p>${isArabic ? prayerDetails[prayer.key] : getEnglishPrayerDetails(prayer.key)}</p>
          <p><strong>${isArabic ? 'ุงูููุช:' : 'Time:'}</strong> ${timeValue}</p>
        `;
      });
      
      prayerTimesDiv.appendChild(card);
    });

    // ุฅุฐุง ูู ูุชู ุชุญุฏูุฏ ุฃู ุจุทุงูุฉุ ูุญุฏุฏ ุจุทุงูุฉ ุงูุตูุงุฉ ุงูุชุงููุฉ
    if (nextPrayer) {
      setTimeout(() => {
        const nextCard = prayerTimesDiv.querySelector('.next');
        if (nextCard) {
          nextCard.click();
        }
      }, 100);
    }

    // ุฅุถุงูุฉ ุงุณู ุงููููุน
    if (locationName) {
      const locationElement = document.createElement('div');
      locationElement.className = 'location-display';
      locationElement.innerHTML = `<i class="fas fa-map-marker-alt"></i> ${isArabic ? 'ูููุนู: ' : 'Your location: '}${locationName}`;
      prayerTimesDiv.parentNode.insertBefore(locationElement, prayerTimesDiv);
    }

    document.getElementById('loading').style.display = 'none';
    document.getElementById('error').innerHTML = '';
    
    // ุฅุนุฏุงุฏ ุงูุชูุจููุงุช
    setupAlarms(timings);
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุงููุงุฌูุฉ:', error);
    handleError(isArabic ? 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุนุฑุถ ุฃููุงุช ุงูุตูุงุฉ' : 'Error displaying prayer times');
  }
}

// ุฏุงูุฉ ูุชุญุฏูุซ ุงูููุช ุงููุชุจูู ููุตูุงุฉ ุงูุชุงููุฉ
function updateNextPrayerCountdown(prayerTime) {
  clearInterval(nextPrayerTimer);
  
  function updateCountdown() {
    const now = new Date();
    const [hours, minutes] = prayerTime.split(':').map(Number);
    const prayerDate = new Date();
    prayerDate.setHours(hours, minutes, 0, 0);
    
    // ุฅุฐุง ูุงู ููุช ุงูุตูุงุฉ ูุฏ ูุถูุ ูุถูู ููู ูุงูู
    if (prayerDate < now) {
      prayerDate.setDate(prayerDate.getDate() + 1);
    }
    
    const diff = prayerDate - now;
    const hoursRemaining = Math.floor(diff / (1000 * 60 * 60));
    const minutesRemaining = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const secondsRemaining = Math.floor((diff % (1000 * 60)) / 1000);
    
    document.getElementById('timeRemaining').textContent = 
      `${hoursRemaining.toString().padStart(2, '0')}:${minutesRemaining.toString().padStart(2, '0')}:${secondsRemaining.toString().padStart(2, '0')}`;
  }
  
  updateCountdown();
  nextPrayerTimer = setInterval(updateCountdown, 1000);
}

// ุฏุงูุฉ ูุฅุนุฏุงุฏ ุงูุชูุจููุงุช
function setupAlarms(timings) {
  // ุฅูุบุงุก ุฃู ุชูุจููุงุช ุณุงุจูุฉ
  if (alarmTimer) clearTimeout(alarmTimer);

  // ุงูุชุญูู ูู ุชูุนูู ุงูุชูุจูู
  const alarmToggle = document.getElementById('alarmToggle');
  if (!alarmToggle || !alarmToggle.checked) return;

  const alarmMinutes = parseInt(document.getElementById('alarmMinutes').value) || 15;
  
  // ุงูุญุตูู ุนูู ุงูุฃููุงุช ุงูุญุงููุฉ
  const now = new Date();
  
  // ุงูุจุญุซ ุนู ุงูุตูุงุฉ ุงูุชุงููุฉ
  const prayerTimes = [
    { key: 'Fajr', time: timings.Fajr },
    { key: 'Dhuhr', time: timings.Dhuhr },
    { key: 'Asr', time: timings.Asr },
    { key: 'Maghrib', time: timings.Maghrib },
    { key: 'Isha', time: timings.Isha }
  ].map(prayer => {
    const [hours, minutes] = prayer.time.split(':').map(Number);
    const timeDate = new Date();
    timeDate.setHours(hours, minutes, 0, 0);
    return { name: prayer.key, time: timeDate };
  });

  // ุชุตููุฉ ุงูุฃููุงุช ุงูุชู ูู ุชูุฑ ุจุนุฏ
  const upcomingPrayers = prayerTimes.filter(prayer => prayer.time > now);
  
  if (upcomingPrayers.length > 0) {
    // ูุฃุฎุฐ ุฃูุฑุจ ุตูุงุฉ
    const nextPrayer = upcomingPrayers.sort((a, b) => a.time - b.time)[0];
    
    // ุญุณุงุจ ุงูููุช ุงููุชุจูู ุญุชู ุงูุชูุจูู (ูุจู ุงูุตูุงุฉ ุจู alarmMinutes ุฏูููุฉ)
    const alarmTime = new Date(nextPrayer.time.getTime() - alarmMinutes * 60000);
    const timeUntilAlarm = alarmTime - now;
    
    if (timeUntilAlarm > 0) {
      alarmTimer = setTimeout(() => {
        showAlarmNotification(nextPrayer.name);
      }, timeUntilAlarm);
    }
  }
}

// ุฏุงูุฉ ูุนุฑุถ ุชูุจูู
function showAlarmNotification(prayerName) {
  const prayerNames = {
    Fajr: isArabic ? 'ุงููุฌุฑ' : 'Fajr',
    Dhuhr: isArabic ? 'ุงูุธูุฑ' : 'Dhuhr',
    Asr: isArabic ? 'ุงูุนุตุฑ' : 'Asr',
    Maghrib: isArabic ? 'ุงููุบุฑุจ' : 'Maghrib',
    Isha: isArabic ? 'ุงูุนุดุงุก' : 'Isha'
  };
  
  const message = isArabic ? 
    `ุชุจูู 15 ุฏูููุฉ ูุตูุงุฉ ${prayerNames[prayerName]}` : 
    `15 minutes until ${prayerNames[prayerName]} prayer`;
  
  // ูููู ุงุณุชุฎุฏุงู Notification API ุฅุฐุง ูุงู ูุฏุนููุงู
  if (!("Notification" in window)) {
    alert(message);
  } else if (Notification.permission === "granted") {
    new Notification(isArabic ? 'ููุนุฏ ุงูุตูุงุฉ' : 'Prayer Time', { body: message });
  } else if (Notification.permission !== 'denied') {
    Notification.requestPermission().then(permission => {
      if (permission === "granted") {
        new Notification(isArabic ? 'ููุนุฏ ุงูุตูุงุฉ' : 'Prayer Time', { body: message });
      }
    });
  }
}

// ุฏุงูุฉ ูุนุฑุถ ุงูุฃุฎุทุงุก
function handleError(message) {
  document.getElementById('loading').style.display = 'none';
  const errorDiv = document.getElementById('error');
  if (errorDiv) errorDiv.innerHTML = `๐จ ${message}`;
}

// ุฏุงูุฉ ูุชุญุฏูุซ ุงูุชุงุฑูุฎ ูุงูููุช ุงูุญุงูู
function updateDateTime() {
  const now = new Date();
  const options = { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  };
  
  const dateTimeStr = isArabic ? 
    now.toLocaleDateString('ar-SA', options) :
    now.toLocaleDateString('en-US', { ...options, weekday: 'long' });
  
  document.getElementById('currentDateTime').textContent = dateTimeStr;
}

// ุฏุงูุฉ ูุชุญุฏูุซ ุงูุชุงุฑูุฎ ุงููุฌุฑู
function updateHijriDate() {
  const today = new Date();
  const hijri = new Intl.DateTimeFormat('ar-SA-u-ca-islamic', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  }).format(today);
  
  document.getElementById('hijriDate').textContent = hijri;
}

// ุฏุงูุฉ ููุญุตูู ุนูู ุชูุงุตูู ุงูุตูุงุฉ ุจุงูุฅูุฌููุฒูุฉ
function getEnglishPrayerDetails(prayerKey) {
  const details = {
    Fajr: "Fajr is the first of the five daily prayers. Its time begins at true dawn and ends at sunrise. It consists of 2 rak'ahs.",
    Sunrise: "Sunrise marks the end of Fajr prayer time and the beginning of the time when voluntary prayers are prohibited until the sun has risen.",
    Dhuhr: "Dhuhr is the second prayer. Its time begins when the sun has passed its zenith and ends when the shadow of an object becomes equal to its length. It consists of 4 rak'ahs.",
    Asr: "Asr is the third prayer. Its time begins when the shadow of an object becomes equal to its length and ends at sunset. It consists of 4 rak'ahs.",
    Maghrib: "Maghrib is the fourth prayer. Its time begins immediately after sunset and ends when the red twilight disappears. It consists of 3 rak'ahs.",
    Isha: "Isha is the fifth prayer. Its time begins after the disappearance of the red twilight and ends at midnight. It consists of 4 rak'ahs."
  };
  
  return details[prayerKey] || "Prayer information not available.";
}

// ุนูุฏ ุชุญููู ุงูุตูุญุฉ
document.addEventListener('DOMContentLoaded', async () => {
  // ุชุญุฏูุซ ุงูุชุงุฑูุฎ ูุงูููุช
  updateDateTime();
  setInterval(updateDateTime, 1000);
  
  // ุชุญุฏูุซ ุงูุชุงุฑูุฎ ุงููุฌุฑู
  updateHijriDate();
  setInterval(updateHijriDate, 24 * 60 * 60 * 1000);
  
  // ูุนุงูุฌุฉ ุชุบููุฑ ุงููุบุฉ
  document.getElementById('langAr').addEventListener('click', () => {
    isArabic = true;
    document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.remove('active'));
    document.getElementById('langAr').classList.add('active');
    // ุฅุนุงุฏุฉ ุชุญููู ุงููุงุฌูุฉ
    getLocation();
    translateUI();
  });
  
  document.getElementById('langEn').addEventListener('click', () => {
    isArabic = false;
    document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.remove('active'));
    document.getElementById('langEn').classList.add('active');
    // ุฅุนุงุฏุฉ ุชุญููู ุงููุงุฌูุฉ
    getLocation();
    translateUI();
  });
  
  // ุชุฑุฌูุฉ ุงููุงุฌูุฉ ุนูุฏ ุงูุชุญููู
  translateUI();
  
  const modeSelector = document.getElementById('modeSelect');
  if (!modeSelector) return;
  
  const savedMode = localStorage.getItem('selectedMode') || 'auto';
  modeSelector.value = savedMode;
  isManualMode = savedMode === 'manual';
  
  const manualControls = document.getElementById('manualControls');
  if (manualControls) manualControls.style.display = isManualMode ? 'block' : 'none';
  
  const calcMethod = document.getElementById('calculationMethod');
  if (calcMethod) calcMethod.value = getSavedMethod();
  
  await loadLocalDB();
  getLocation();
});

// ุฏุงูุฉ ูุชุฑุฌูุฉ ูุงุฌูุฉ ุงููุณุชุฎุฏู
function translateUI() {
  document.getElementById('modeSelect').options[0].text = isArabic ? 'ุชููุงุฆู' : 'Automatic';
  document.getElementById('modeSelect').options[1].text = isArabic ? 'ูุฏูู' : 'Manual';
  
  document.querySelector('.mode-selector label').innerHTML = 
    isArabic ? '<i class="fas fa-cog"></i> ุงุฎุชุฑ ุงููุถุน:' : '<i class="fas fa-cog"></i> Select Mode:';
  
  document.querySelector('.method-selector label').innerHTML = 
    isArabic ? '<i class="fas fa-calculator"></i> ุทุฑููุฉ ุงูุญุณุงุจ:' : '<i class="fas fa-calculator"></i> Calculation Method:';
  
  document.getElementById('calculationMethod').options[0].text = isArabic ? 'ุฑุงุจุทุฉ ุงูุนุงูู ุงูุฅุณูุงูู' : 'Muslim World League';
  document.getElementById('calculationMethod').options[1].text = isArabic ? 'ุงูููุฆุฉ ุงููุตุฑูุฉ ุงูุนุงูุฉ ูููุณุงุญุฉ' : 'Egyptian General Authority';
  document.getElementById('calculationMethod').options[2].text = isArabic ? 'ุงูุฌุงูุนุฉ ุงูุฅุณูุงููุฉ ูู ูุฑุงุชุดู' : 'University of Islamic Sciences, Karachi';
  document.getElementById('calculationMethod').options[3].text = isArabic ? 'ูุฌูุณ ุงูุฅูุชุงุก ุงูุฃูุฑูุจู' : 'European Council for Fatwa and Research';
  document.getElementById('calculationMethod').options[4].text = isArabic ? 'ูุฌูุณ ุงูููู ุจุฃูุฑููุง ุงูุดูุงููุฉ' : 'North American Fiqh Council';
  
  document.querySelectorAll('.method-selector label')[1].innerHTML = 
    isArabic ? '<i class="fas fa-globe-asia"></i> ุงุฎุชุฑ ุงูุฏููุฉ:' : '<i class="fas fa-globe-asia"></i> Select Country:';
  
  document.querySelectorAll('.method-selector label')[2].innerHTML = 
    isArabic ? '<i class="fas fa-city"></i> ุงุฎุชุฑ ุงููุฏููุฉ:' : '<i class="fas fa-city"></i> Select City:';
  
  document.getElementById('countrySelect').options[0].text = isArabic ? '-- ุงุฎุชุฑ ุงูุฏููุฉ --' : '-- Select Country --';
  document.getElementById('citySelect').options[0].text = isArabic ? '-- ุงุฎุชุฑ ุงููุฏููุฉ --' : '-- Select City --';
  
  document.querySelector('.alarm-settings h3').innerHTML = 
    isArabic ? '<i class="fas fa-bell"></i> ุฅุนุฏุงุฏุงุช ุงูุชูุจูู' : '<i class="fas fa-bell"></i> Alarm Settings';
  
  document.querySelector('.alarm-controls label[for="alarmToggle"]').textContent = 
    isArabic ? 'ุชูุนูู ุงูุชูุจูู:' : 'Enable Alarm:';
  
  document.querySelector('.alarm-controls label[for="alarmMinutes"]').textContent = 
    isArabic ? 'ุฏูุงุฆู ูุจู ุงูุตูุงุฉ:' : 'Minutes before prayer:';
  
  document.querySelector('.prayer-info h3').innerHTML = 
    isArabic ? '<i class="fas fa-info-circle"></i> ูุนูููุงุช ุนู ุงูุตูุงุฉ' : '<i class="fas fa-info-circle"></i> Prayer Information';
  
  document.getElementById('nextPrayerTitle').innerHTML = 
    isArabic ? 'ุงูุตูุงุฉ ุงูุชุงููุฉ: <span id="nextPrayerName">--</span>' : 'Next Prayer: <span id="nextPrayerName">--</span>';
  
  document.getElementById('appVersion').textContent = 
    isArabic ? 'ุงูุฅุตุฏุงุฑ 2.0' : 'Version 2.0';
}

// ูุนุงูุฌุงุช ุงูุฃุญุฏุงุซ
document.getElementById('calculationMethod')?.addEventListener('change', () => getLocation());
document.getElementById('countrySelect')?.addEventListener('change', () => {
  updateCityDropdown();
  const citySelector = document.getElementById('citySelect');
  if (citySelector?.options.length > 1) {
    citySelector.value = citySelector.options[1].value;
    getLocation();
  }
});
document.getElementById('citySelect')?.addEventListener('change', () => getLocation());

document.getElementById('modeSelect')?.addEventListener('change', (e) => {
  isManualMode = e.target.value === 'manual';
  localStorage.setItem('selectedMode', e.target.value);
  
  const manualControls = document.getElementById('manualControls');
  if (manualControls) manualControls.style.display = isManualMode ? 'block' : 'none';
  
  if (isManualMode) {
    loadLocalDB().then(() => {
      const countrySelector = document.getElementById('countrySelect');
      if (countrySelector?.options.length > 1) {
        countrySelector.value = countrySelector.options[1].value;
        updateCityDropdown();
      }
    });
  } else {
    getLocation();
  }
});

// ูุนุงูุฌุฉ ุชุบููุฑ ุฅุนุฏุงุฏุงุช ุงูุชูุจูู
document.getElementById('alarmToggle')?.addEventListener('change', () => {
  // ุนูุฏ ุชูุนูู/ุฅูุบุงุก ุงูุชูุจููุ ูุนูุฏ ุชุญููู ุงูุฃููุงุช ูุฅุนุงุฏุฉ ุญุณุงุจ ุงูุชูุจููุงุช
  getLocation();
});
document.getElementById('alarmMinutes')?.addEventListener('change', () => {
  getLocation();
});

// ูุฑุงูุจุฉ ุญุงูุฉ ุงูุงุชุตุงู
window.addEventListener('online', () => {
  document.getElementById('offlineNotice').style.display = 'none';
  getLocation();
});
window.addEventListener('offline', () => {
  document.getElementById('offlineNotice').style.display = 'flex';
  getLocation();
});